diff --git a/backend/internal/controllers/middleware/requireAuth.go b/backend/internal/controllers/middleware/requireAuth.go
index 5dca42f..c8ecdac 100644
--- a/backend/internal/controllers/middleware/requireAuth.go
+++ b/backend/internal/controllers/middleware/requireAuth.go
@@ -17,7 +17,6 @@ func RequireAuth(authenticator auth.Authenticator) func(http.Handler) http.Handl
 			// verify the token of the user
 			authHeader := req.Header.Get("Authorization")
 			if authHeader == "" {
-				// kill request
 				writeResponse(rw, http.StatusUnauthorized, "User needs to be authenticated")
 				return
 			}
@@ -30,7 +29,6 @@ func RequireAuth(authenticator auth.Authenticator) func(http.Handler) http.Handl
 			tokenString := strings.TrimPrefix(authHeader, "Bearer ")
 			uid, ok := authenticator.VerifyToken(req.Context(), tokenString)
 			if !ok {
-				// something went wrong
 				writeResponse(rw, http.StatusForbidden, "Token was invalid")
 				return
 			}
diff --git a/backend/internal/controllers/user.go b/backend/internal/controllers/user.go
index a5671fd..4eabfa3 100644
--- a/backend/internal/controllers/user.go
+++ b/backend/internal/controllers/user.go
@@ -10,11 +10,15 @@ import (
 )
 
 type UserController struct {
-	// Hold a reference to the database so that all of the functions below can use it
-	// Keeps an authenticator to authenticate token
 	Users database.UserDatabase
 }
 
+/*
+ * Handler parses body of request and ensures it is a valid request
+ * Makes sure user id's match, user with this email doesn't already exist
+ * creates the user in the backend
+ */
+
 func (c *UserController) CreateUser(rw http.ResponseWriter, req *http.Request) {
 	var user models.User
 
@@ -34,12 +38,16 @@ func (c *UserController) CreateUser(rw http.ResponseWriter, req *http.Request) {
 		return
 	}
 
-	_, err := c.Users.FetchUserByEmail(req.Context(), user.Email)
-	if err != nil {
+	duplicate, err := c.Users.FetchUserByEmail(req.Context(), user.Email)
+	if duplicate != nil {
 		// we have created a user with this email before
 		writeResponse(rw, http.StatusBadRequest, "user with email already exists")
 		return
 	}
+	if err != nil {
+		writeResponse(rw, http.StatusInternalServerError, "error")
+		return
+	}
 
 	id, err := c.Users.CreateUser(req.Context(), user)
 	if err != nil {
diff --git a/backend/internal/database/users.go b/backend/internal/database/users.go
index 4f123fc..abf008e 100644
--- a/backend/internal/database/users.go
+++ b/backend/internal/database/users.go
@@ -2,6 +2,7 @@ package database
 
 import (
 	"context"
+	"fmt"
 
 	"github.com/TritonSE/words-alive/internal/models"
 	"github.com/jackc/pgx"
@@ -40,8 +41,11 @@ func (db *UserDatabase) FetchUserByID(ctx context.Context, id string) (*models.U
 func (db *UserDatabase) FetchUserByEmail(ctx context.Context, email string) (*models.User, error) {
 	var user models.User
 
-	rows, err := db.Conn.QueryEx(ctx, "SELECT id, name, email, in_san_diego FROM users WHERE email = $1", nil, email)
+	query := "SELECT id, name, email, in_san_diego FROM users WHERE email = '" + email + "'"
+	rows, err := db.Conn.QueryEx(ctx, query, nil)
+	//rows, err := db.Conn.QueryEx(ctx, "SELECT id, name, email, in_san_diego FROM users WHERE email = '$1'", nil, email)
 	if err != nil {
+		fmt.Println(err)
 		return nil, errors.Wrap(err, "error on SELECT FROM user")
 	}
 	if !rows.Next() {
