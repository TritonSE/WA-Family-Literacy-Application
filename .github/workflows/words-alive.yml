name: words-alive

on:
  push:
    branches: [ main ]
    tags: [ v** ]
  pull_request:
    branches: [ main ]

jobs:
  backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.15
      - name: Clone
        uses: actions/checkout@v2
      - name: Build
        working-directory: backend
        run: make
      - name: Lint
        uses: Jerome1337/gofmt-action@v1.0.4
        with:
          gofmt-path: './backend'
          gofmt-flags: '-l -d -s'
      - name: Test
        working-directory: backend
        run: make test
        env:
          DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/postgres'
  mobile:
    runs-on: ubuntu-latest
    steps:
      - name: Clone
        uses: actions/checkout@v2
      - name: Install Dependencies
        working-directory: mobile
        run: npm ci
      - name: Build
        working-directory: mobile
        run: npm run build
      - name: Lint
        working-directory: mobile
        run: npm run lint
  web:
    runs-on: ubuntu-latest
    steps:
      - name: Clone
        uses: actions/checkout@v2
      - name: Install Dependencies
        working-directory: web
        run: npm ci
      - name: Build
        working-directory: web
        run: npm run build
      - name: Lint
        working-directory: web
        run: npm run lint
  deploy-staging:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - backend
      - mobile
      - web
    steps:
      - name: Clone
        uses: actions/checkout@v2
      - name: Log into GitHub container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: TritonSE
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate image tags
        id: docker_meta_gh
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ghcr.io/tritonse/words-alive
      - name: Build and push to GitHub container registry
        uses: docker/build-push-action@v2
        with:
          context: backend
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta_gh.outputs.tags }}
          labels: ${{ steps.docker_meta_gh.outputs.labels }}
      - name: Log into Heroku container registry
        run: heroku container:login
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      - name: Build and push to Heroku container registry
        uses: docker/build-push-action@v2
        with:
          context: backend
          platforms: linux/amd64
          push: true
          tags: registry.heroku.com/words-alive-staging/web
      - name: Release to Heroku
        run: heroku container:release web -a words-alive-staging
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
  deploy-prod:
    if: contains(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs:
      - backend
      - mobile
      - web
    steps:
      - name: Clone
        uses: actions/checkout@v2
      - name: Log into GitHub container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: TritonSE
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate image tags
        id: docker_meta_gh
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ghcr.io/tritonse/words-alive
      - name: Build and push to GitHub container registry
        uses: docker/build-push-action@v2
        with:
          context: backend
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta_gh.outputs.tags }}
          labels: ${{ steps.docker_meta_gh.outputs.labels }}
      - name: Log into Heroku container registry
        run: heroku container:login
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      - name: Build and push to Heroku container registry
        uses: docker/build-push-action@v2
        with:
          context: backend
          platforms: linux/amd64
          push: true
          tags: registry.heroku.com/words-alive/web
      - name: Release to Heroku
        run: heroku container:release web -a words-alive
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
